class Solution {

    // DFS to check graph connectivity
    boolean isc(int V, List<Integer>[] adj) {
        boolean[] vis = new boolean[V];
        int start = -1;

        // Find the first node with edges
        for (int i = 0; i < V; i++) {
            if (!adj[i].isEmpty()) {
                start = i;
                break;
            }
        }

        if (start == -1) return true; // No edges, graph is trivially connected

        dfs(start, adj, vis);

        // Check all nodes with edges are visited
        for (int i = 0; i < V; i++) {
            if (!adj[i].isEmpty() && !vis[i]) return false;
        }

        return true;
    }

    void dfs(int node, List<Integer>[] adj, boolean[] vis) {
        vis[node] = true;
        for (int nei : adj[node]) {
            if (!vis[nei]) dfs(nei, adj, vis);
        }
    }

    public int isEulerCircuit(int V, List<Integer>[] adj) {
        int odd = 0;

        // Count nodes with odd degree
        for (int i = 0; i < V; i++) {
            if (adj[i].size() % 2 != 0) odd++;
        }

        // Check connectivity
        if (!isc(V, adj)) return 0;

        // Eulerian circuit
        if (odd == 0) return 2;

        // Eulerian path
        if (odd == 2) return 1;

        // Not Eulerian
        return 0;
    }
}
