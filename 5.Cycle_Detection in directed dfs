class Solution {
    public boolean isCyclic(int V, int[][] edges) {
        // Create adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);  // Directed graph: only u → v
        }

        boolean[] visited = new boolean[V];
        boolean[] rec = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (helper(adj, visited, rec, i)) {
                    return true;
                }
            }
        }

        return false;
    }

    boolean helper(ArrayList<ArrayList<Integer>> adj, boolean[] visited, boolean[] rec, int u) {
        visited[u] = true;
        rec[u] = true;

        for (int n : adj.get(u)) {
            if (!visited[n]) {
                if (helper(adj, visited, rec, n)) {
                    return true;
                }
            } else if (rec[n]) {
                // If already visited and still in recursion stack — cycle
                return true;
            }
        }

        rec[u] = false; // ✅ Reset after exploring all neighbors
        return false;
    }
}
