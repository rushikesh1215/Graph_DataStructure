import java.util.*;

class Solution {
    class DisjointSet {
        int[] parent, rank;
        DisjointSet(int n) {
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) parent[i] = i;
        }

        int find(int x) {
            if (x != parent[x])
                parent[x] = find(parent[x]);  // path compression
            return parent[x];
        }

        boolean union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY) return false;

            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
            return true;
        }
    }

    public int kruskalMST(int V, int[][] edges) {
        Arrays.sort(edges, (a, b) -> a[2] - b[2]);  // sort by weight
        DisjointSet ds = new DisjointSet(V);
        int mstWeight = 0;

        for (int[] edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            if (ds.union(u, v)) {
                mstWeight += w;
            }
        }

        return mstWeight;
    }

    // Driver
    public static void main(String[] args) {
        Solution sol = new Solution();
        int V = 3;
        int[][] edges = {{0, 1, 5}, {1, 2, 3}, {0, 2, 1}};
        System.out.println("MST Weight: " + sol.kruskalMST(V, edges));
    }
}
