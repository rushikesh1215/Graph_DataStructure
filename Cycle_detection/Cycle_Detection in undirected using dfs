class Solution {
    public boolean isCycle(int V, int[][] edges) {
        // Create adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);  // Undirected graph
        }

        boolean[] visited = new boolean[V];

        // Check all components
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (helper(adj, visited, i, -1)) {
                    return true;
                }
            }
        }

        return false;
    }

    boolean helper(ArrayList<ArrayList<Integer>> adj, boolean[] visited, int u, int parent) {
        visited[u] = true;
        for (int nei : adj.get(u)) {
            if (nei == parent) continue;
            if (visited[nei]) return true;
            if (helper(adj, visited, nei, u)) return true;
        }
        return false;
    }
}
